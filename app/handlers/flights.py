from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from app.handlers.city_from import States
import datetime
from dateutil.parser import parse
import app.functions as fc
import app.keyboards as kb

router = Router()

@router.message(States.waiting_date)
async def departure_date(message: Message, state: FSMContext):
    data = await state.get_data()
    city_from = data.get("city_from")
    code_from = data.get("code_from")
    city_to = data.get("city_to")
    code_to = data.get("code_to")

    date_input = message.text.lower()
    month_ru = {
        '—è–Ω–≤–∞—Ä—è': 'January', '—è–Ω–≤–∞—Ä—å': 'January',
        '—Ñ–µ–≤—Ä–∞–ª—è': 'February', '—Ñ–µ–≤—Ä–∞–ª—å': 'February',
        '–º–∞—Ä—Ç–∞': 'March', '–º–∞—Ä—Ç': 'March',
        '–∞–ø—Ä–µ–ª—è': 'April', '–∞–ø—Ä–µ–ª—å': 'April',
        '–º–∞—è': 'May', '–º–∞–π': 'May',
        '–∏—é–Ω—è': 'June', '–∏—é–Ω—å': 'June',
        '–∏—é–ª—è': 'July', '–∏—é–ª—å': 'July',
        '–∞–≤–≥—É—Å—Ç–∞': 'August', '–∞–≤–≥—É—Å—Ç': 'August',
        '—Å–µ–Ω—Ç—è–±—Ä—è': 'September', '—Å–µ–Ω—Ç—è–±—Ä—å': 'September',
        '–æ–∫—Ç—è–±—Ä—è': 'October', '–æ–∫—Ç—è–±—Ä—å': 'October',
        '–Ω–æ—è–±—Ä—è': 'November', '–Ω–æ—è–±—Ä—å': 'November',
        '–¥–µ–∫–∞–±—Ä—è': 'December', '–¥–µ–∫–∞–±—Ä—å': 'December'
    }

    try:
        for rus_month, eng_month in month_ru.items():
            if rus_month in date_input:
                date_input = date_input.replace(rus_month, eng_month)
                break

        parsed_date = parse(
            date_input,
            dayfirst=True,
            yearfirst=False,
            default=datetime.datetime.now()
        )

        if parsed_date.year == datetime.datetime.now().year and parsed_date.date() < datetime.date.today():
            parsed_date = parsed_date.replace(year=2025)

        date_obj = parsed_date.date()
        date_input = date_obj.strftime('%Y-%m-%d')

    except ValueError:
        await message.answer("‚¶ç‚õî‚¶é –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 5 –∏—é–Ω—è.")
        return
    
    flights = await fc.get_flights(code_from, code_to, date_input)
    date_input = date_obj.strftime('%d.%m.%Y')
    
    if not flights:
        await message.answer(
            f"‚¶çüòï‚¶é –†–µ–π—Å—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É <b>{city_from}</b> - <b>{city_to}</b> –Ω–∞ <b>{date_input}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", 
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"‚¶çüóìÔ∏è‚¶é –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã <b>{city_from}</b> - <b>{city_to}</b> –Ω–∞ <b>{date_input}</b>:",
        parse_mode="HTML"
    )
    
    for flight in flights:
        departure = datetime.datetime.fromisoformat(flight["departure"]).strftime("%H:%M")
        arrival = datetime.datetime.fromisoformat(flight["arrival"]).strftime("%H:%M")
        icon = "üöÇ" if flight["transport_type"] == "train" else "üõ´"

        text = (
            f'‚¶ç{icon}‚¶é –†–µ–π—Å "<b>{flight["title"]}</b>" ‚¶ç<b>{flight["number"]}</b>‚¶é\n'
            f'‚ü•‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ü§\n'
            f'‚¶çüóìÔ∏è‚¶é –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{flight["fromm"]}</b> <blockquote>{departure}</blockquote>\n'
            f'‚¶çüïê‚¶é –í—Ä–µ–º—è –≤ –ø—É—Ç–∏: <b>{int(flight["duration"])//86400} –¥–Ω–µ–π {int(flight["duration"])%86400//3600} —á–∞—Å–æ–≤</b>\n'
            f'‚¶çüèÅ‚¶é –ü—Ä–∏–±—ã—Ç–∏–µ: <b>{flight["to"]}</b> <blockquote>{arrival}</blockquote>\n'
        )

        await message.answer(text, parse_mode="HTML")

    await message.answer(
        "<blockquote><b> ‚¶çü§©‚¶é –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è </b></blockquote>", 
        reply_markup=kb.general, parse_mode="HTML"
    )
    await state.set_state(None)
