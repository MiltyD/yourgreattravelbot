from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import app.functions as fc

router = Router()

@router.message(F.text == '‚¶ç‚≠ê‚¶é –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞')
async def interesting_places(message: Message, state: FSMContext):
    data = await state.get_data()
    city_to = data.get("city_to")
    coord = await fc.get_weather(city_to)

    try:
        attractions = await fc.get_attractions(city_to, coord['lat'], coord['lon'])
    except Exception as e:
        await message.answer(f"‚¶ç‚ö†Ô∏è‚¶é –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        return

    if not attractions:
        await message.answer(f"‚¶çüòï‚¶é –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤ –≥–æ—Ä–æ–¥–µ {city_to}.")
        return

    text = f"‚¶ç‚≠ê‚¶é –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ <b>{city_to}</b>:\n\n"
    for attraction in attractions:
        text += f"‚¶çüìç‚¶é <b>{attraction['name'].capitalize()}</b>\n{attraction['address'].capitalize()}\n\n"

    await message.answer(text, parse_mode="HTML")
